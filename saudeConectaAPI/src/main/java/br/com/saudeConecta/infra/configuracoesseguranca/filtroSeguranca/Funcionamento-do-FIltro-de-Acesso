



==================================================== ATENÇÃO ===========================================================

=====================================================RESUMO=============================================================

A classe 'filtroAcesso' tem como abjetivo filtra toda requisição que vai para um endpoint, quando se passa um token ele
fica responsável por pegar esse token e trazer o subject desse token. Um subject nada mais é do que a informação contida
dentro do token. Um exemplo: um subject pode ser um (login, nome, CPF), depois disso, se validado o token, ele passa para.
Os próximos filtros do Spring  ⇒ filterChain.doFilter(request, response);

===========================================EXPLICANDO SEU FUNCIONAMENTO=================================================

Para explicar o funcionamento da classe 'filtroAcesso' é importante compreender algumas informações do banco de dados.

________________________________________________________________________________________________________________________
|    USUÁRIOS               |            TABELA NO BANCO        |           RELACIONAMENTO NO SPRING BOOT               |
|___________________________|___________________________________|_______________________________________________________|
|   * PROFESSOR             |               PROFESSOR           |                 Professor Sace                        |
|___________________________|___________________________________|_______________________________________________________|
|   * COORDENADOR           |               CURSOAVALIAÇÂO      |                 ProfessorSace                         |
|___________________________|___________________________________|_______________________________________________________|
|   * DIRETOR               |               INSTITUTO           |                 ProfessorSace                         |
|___________________________|___________________________________|_______________________________________________________|
|   * ADMINISTRAÇÂO         |                USURÁRIO           |                   UsuárioSace                         |
|___________________________|___________________________________|_______________________________________________________|



Bom como a tabela acima é possível observar quase todos os usuários estão dentro da tabela  PROFESSOR com a exceção do
usuário de ADMINISTRAÇÃO.

Com isso em mente, o código começa pegando o token inserido no HEADER e extrai o subject dentro do token, nesse caso o
subject é o login do usuário cadastrado dentro do banco.

Depois e criado um objeto do tipo authorities e logo fazemos a busca do login na tabela de PROFESSOR. Se caso existir um
O usuário dentro da tabela é retornando, caso não é retornando null.

Depois é feita a mesma pesquisa na tabela  USUÁRIO(administração) e CURSOAVALIAÇÂO(coordenador). E a última pesquisa.
 é feita na tabela de INSTITUTO(diretor) somente se PROFESSOR não for null.

(PERGUNTA: Pq é feita a pesquisa em INSTITUTO somente se o professor não for null? )

Resposta: Por que quando é feito o cadastro na tabela INSTITUTO existe um campo onde tem que colocar o código do professor.
          Que vai servir de referência. Ou seja, em outras palavras, existe um certo tipo de relacionamento em
          INSTITUTO com o professor.

          Obs.: esse relacionamento citado anteriormente não existe no banco de dados.Lembando que esse relacionamento não
          existe de fato, na tabela é apenas colocado o Id do professor no registro NÃO HÁ NENHUM RELACIONAMENTO.


Após todas as pesquisas.

       ProfessorSace professor = professorSaceRepository.findByUsername(nome); << professor
       UsuárioSace usuárioSace = usuárioSaceRepository.findByUsername(nome);   << administração
       CursoAvaliacaoSace cursoSace = cursoAvaliacaoSaceRepository.findByPk_CavCoordProCodigo_Username(nome); << coordenador

       InstitutoSace institutoSace = null; << diretor
       if (professor!= null) {
       institutoSace = institutoSaceRepository.findByInsProCodigoDiretor(professor.getProCodigo());

       }


É verificada as condições dos IF's

1) O primeiro IF ⇒ if (professor!= null || usuárioSace!= null) verifica se o objeto professor OU usuárioSace e
diferente de null, se algum deles for null isso indicaria que nenhum dos dois está associado ao token JWT fornecido,
e é associado a USUARIO_SEM_ACESSO

//

2) Quando estiverem dentro do IF ⇾   if (cursoSace!= null && cursoSace.getCavCoordTipoAcesso().equals(1L)) .
Verifica-se se o usuário é um professor ou um coordenador. O mesmo é feito para o IF  3.

//

(PERGUNTA: Por que essa consulta?)

(RESPOSTA: A variável que define se um professor é um coordenador fica na tabela CURSOAVALIAÇÂO se chama
            'CavCoordTipoAcesso' ela está pode obter dois estados 1 ->> ROLE_USUARIO_SEM_ACESSO 2 ->>ROLE_COORDENADOR
            pode melhor ser observado na classe 'CursoaAvaliacaoSace.class', diante disso é verificado qual dos dois
            estado ela esta e é adicionado o seu ROLE)

//

3) No IF --> else if (cursoSace!= null && cursoSace.getCavCoordTipoAcesso().equals(2L)) e verificado se a variável.
'CavCoordTipoAcesso' é igual a 2, é associado a ROLE_COORDENADOR.

//

4) Depois, no quarto, else if --> if (institutoSace == null && cursoSace == null && professor!=null) se forem atendidas.
As condições acima significam que esse registro é um professor, pois não é nem um coordenador e nem um diretor e   ele
está presente apenas na tabela de professor.

//

5) Se passar pelo quinto IF --> if (institutoSace!= null) significa que não foi encontrado registro dentro da tabela
CURSOAVALIAÇÂO, mas foi encontrado na tabela INSTITUTO, logo esse registro é um diretor.

//

6) E por fim, se nenhuma das condições acima foi atendida, ele só pode entrar no IF --> else if (usuarioSace!= null)
significa que o registro existe na tabela USUÁRIO, logo ele é um ROLE_ADMINISTRACAO.


=================================================RECAPITULANDO==========================================================

                                            As condições verificadas foram

    ----------------------------------------------------------------------------------------------------------------
    * Professor normal: É um professor que NAO é coordenador e nem diretor.

        Representado pelo IF //4
         else if (institutoSace == null && cursoSace == null && professor!=null) {
                            userDetails = professor;
                            authorities.add(new SimpleGrantedAuthority("ROLE_PROFESSOR"));
                     }
    ----------------------------------------------------------------------------------------------------------------
    * Prof.Coordenador sem acesso: É um Prof.coordenador que já foi coordenador no passado, mas hoje NAO é mais um
                                    Coordenador e apenas um professor.

        Representado pelo IF //2
         if (cursoSace!= null && cursoSace.getCavCoordTipoAcesso().equals(1L)) {
                            userDetails = professor;
                            authorities.add(new SimpleGrantedAuthority("ROLE_PROFESSOR"));
                        }
    ----------------------------------------------------------------------------------------------------------------
    * Prof.Coordenador com acesso: È um professor que é valido e tem acesso como coordenador.

        Representado pelo IF
        else if (cursoSace!= null && cursoSace.getCavCoordTipoAcesso().equals(2L)) {
                            userDetails = professor;
                            authorities.add(new SimpleGrantedAuthority("ROLE_COORDENADOR"));

                        }
    _______________________________________________________________________________________________________________
    * Diretor: È um professor que TEM que estar dentro da tabela INSTITUTO(diretor) para poder estar valido
               como diretor.

        Representado pelo IF
        else if (institutoSace!= null) {
                            userDetails = professor;
                            authorities.add(new SimpleGrantedAuthority("ROLE_DIRETOR"));
                        }
    ______________________________________________________________________________________________________________
    * Administrador: É um registro que TEM que estar dentro da tabela USUÁRIO (administração) para poder estar
                    valido como um administrador

        Representado pelo IF
          else if (usuarioSace!= null) {
                            userDetails = usuarioSace;
                            authorities.add(new SimpleGrantedAuthority("ROLE_ADMINISTRATIVO"));
                        }
    ______________________________________________________________________________________________________________




========================================================================================================================